Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).

For example: 
Given binary tree [3,9,20,null,null,15,7], 
3 
/ \ 
9 20 
/ \ 
15 7 
return its level order traversal as: 
[ 
[3], 
[9,20], 
[15,7] 
]

非递归法

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
       if(!root) return {};
       queue<TreeNode*> q;vector<vector<int>> v;
       q.push(root);
       while(!q.empty()){
           vector<int> v1;
           int m=q.size();
           for(int i=0;i<m;++i){//这里不可以写成for(int i=0;i<q.size();++i)，因为在for语句里q在不断push，所以每次循环q.size()都在变化

           TreeNode *p=q.front();
           q.pop();
           v1.push_back(p->val);
           if(p->left) q.push(p->left);
           if(p->right) q.push(p->right);
           }
           v.push_back(v1);
       }
       return v;
    }
};

递归法

vector<vector<int>> levelOrder(TreeNode* root) {
       if(!root) return {};
       vector<vector<int>> v;
       levelOrder(0,v,root);
       return v;
    }
    void levelOrder(int level,vector<vector<int>> &v,TreeNode *root){
        if(!root) return;
        if(level==v.size()) v.push_back({});
        v[level].push_back(root->val);
        levelOrder(level+1,v,root->left);
        levelOrder(level+1,v,root->right);
    }
