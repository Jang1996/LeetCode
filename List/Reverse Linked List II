Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(!head||m==n) return head;
        int a=0,i,j;
        ListNode *pre=new ListNode(-1);
        ListNode *p=pre,*q,*cur;
        pre->next=head;
      while(a<m-1){
          p=p->next;
          a++;
      }//p指向m的前一个结点
      q=p->next;
      while(a<n-1){
        cur=q->next;
      if(!cur) return head;  
      q->next=cur->next;
        cur->next=p->next;
        p->next=cur;
        a++;
      }
      return pre->next;}
};
