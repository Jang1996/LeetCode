Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.


class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *n1=new ListNode(0),*n2=new ListNode(0);
        ListNode *p=n1,*q=n2;
        while(head){
            if(head->val<x) {p->next=head;p=p->next;}
            if(head->val>=x) {q->next=head;q=q->next;}
            head=head->next;
           
        }
        
            q->next=NULL;
        p->next=n2->next;
        return n1->next;
        
    }
};
